#pragma checksum "C:\PinLocation\pinlocation\Views\Home\Find.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "65a74b14d37a514bac44fe1937473fff3356539d"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Find), @"mvc.1.0.view", @"/Views/Home/Find.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\PinLocation\pinlocation\Views\_ViewImports.cshtml"
using WebApplication2;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\PinLocation\pinlocation\Views\_ViewImports.cshtml"
using WebApplication2.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"65a74b14d37a514bac44fe1937473fff3356539d", @"/Views/Home/Find.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"6b36aee4455a440795f240a74431c307640c545e", @"/Views/_ViewImports.cshtml")]
    #nullable restore
    public class Views_Home_Find : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    #nullable disable
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "C:\PinLocation\pinlocation\Views\Home\Find.cshtml"
  
    ViewData["Title"] = "Find";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<h1>Find</h1>

<div class=""row"">
    <div class=""col-md-12"">
        <h2>Example 1 - simple distance between two points</h2>
        <p>
            This demonstrates getting and displaying the distance between two points
        </p>

        <div> Add Destination</div>
        <div>
            <input id=""travelto"" type=""text"" name=""name"" />
            <input type=""button"" value=""Add"" onclick=""PushDestination()"" />
            <a href=""#"" onclick=""setDestination('Tagmere, UK')"">Tagmere, UK. </a>
            <a href=""#"" onclick=""setDestination('Bosham, UK')"">Bosham, UK</a>
        </div>
        <div id=""destinations""></div><br />
        Source : <input id=""travelfrom"" type=""text"" name=""name"" value=""Chichester, UK"" />

        <input type=""button"" value=""Calculate"" onclick=""GetRoute()"" />
        <p></p>
        <br />
        <div id=""dvDistance"">
            <table id=""tblResults"" border=""1"" cellpadding=""10"">
                <tr>
                    <th> Start </th>
          ");
            WriteLiteral(@"          <th> End </th>
                    <th> Distance </th>
                    <th> Duration </th>
                </tr>
            </table>

        </div>

        <div id=""dvMap"" style=""min-height:500px""></div>
    </div>
</div>>

<script type=""text/javascript"">
    var source, destination;

    var locations = [];
    var directionsDisplay;
    var directionsService;
    $(document).ready(function () {
        debugger;
        var map = new google.maps.Map(document.getElementById('dvMap'), {
            center: { lat: 50.834697, lng: -0.773792 },
            zoom: 13,
            mapTypeId: 'roadmap'
        });
        directionsService = new google.maps.DirectionsService();

    });

    // initialise the location of the map on Chichester in England (ref lat and lng)


    function PushDestination() {
        //debugger;
        destination = document.getElementById(""travelto"").value;
        locations.push(destination);
        document.getElementById(""travel");
            WriteLiteral(@"to"").value = """";
        destinationArray = document.getElementById(""destinations"");
        destinationArray.innerHTML += destination + ""<br />"";
    }


    function setDestination(dest) {
        //debugger;
        document.getElementById('travelto').value = dest;
        PushDestination();
    }

    function GetRoute() {
        //debugger;
        directionsDisplay.setMap(map);
        source = document.getElementById(""travelfrom"").value;
        destination = document.getElementById(""travelto"").value;

    }


    var waypoints = [];
    for (var i = 0; i < locations.length; i++) {
        var address = locations[i];
        if (address !== """") {
            waypoints.push({
                location: address,
                stopover: true
            });
        }
    }


    //var service = new google.maps.DistanceMatrixService();
    //service.getDistanceMatrix({
    //    origins: [source],
    //    destinations: [destination],
    //    travelMode: google.map");
            WriteLiteral(@"s.TravelMode.DRIVING,
    //    unitSystem: google.maps.UnitSystem.METRIC,
    //    avoidHighways: false,
    //    avoidTolls: false



    //}, request = {
    //    origin: source,
    //    destination: waypoints[0].location,
    //    waypoints: waypoints, //an array of waypoints
    //    optimizeWaypoints: true, //set to true if you want google to determine the
    //    // shortest route or false to use the order specified.
    //    travelMode: google.maps.DirectionsTravelMode.DRIVING
    //});


    directionsService.route(request, function (response, status) {
        //debugger;
        if (status == google.maps.DirectionsStatus.OK) {
            var dvDistance = document.getElementById(""dvDistance"");
            var distance = 0;
            var minute = 0.00;
            response.routes[0].legs.forEach(function (item, index) {
                if (index < response.routes[0].legs.length - 1) {
                    distance = distance + parseInt(item.distance.text);
      ");
            WriteLiteral(@"              minute = parseFloat(minute) + parseFloat(item.duration.value / 60);

                    tbl = document.getElementById(""tblResults"");
                    var row = tbl.insertRow(1);
                    var cell = row.insertCell(0);
                    cell.innerText = source;
                    var cell = row.insertCell(1);
                    cell.innerText = item.end_address;
                    var cell = row.insertCell(2);
                    cell.innerText = distance;
                    var cell = row.insertCell(3);
                    cell.innerText = minute.toFixed(2) + "" min"";
                }
            });
            directionsDisplay.setDirections(response);
        }
        else {
            //handle error
        }
    })
</script>

");
        }
        #pragma warning restore 1998
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; } = default!;
        #nullable disable
        #nullable restore
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; } = default!;
        #nullable disable
    }
}
#pragma warning restore 1591
