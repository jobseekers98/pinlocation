#pragma checksum "D:\CleanWork\WebApplication2\WebApplication2\Views\Home\Find.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "1a6575905c51ef19062d2ede0052b949ef5ada81"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Find), @"mvc.1.0.view", @"/Views/Home/Find.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\CleanWork\WebApplication2\WebApplication2\Views\_ViewImports.cshtml"
using WebApplication2;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\CleanWork\WebApplication2\WebApplication2\Views\_ViewImports.cshtml"
using WebApplication2.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1a6575905c51ef19062d2ede0052b949ef5ada81", @"/Views/Home/Find.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"6b36aee4455a440795f240a74431c307640c545e", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Find : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "D:\CleanWork\WebApplication2\WebApplication2\Views\Home\Find.cshtml"
  
    ViewData["Title"] = "Find";
    Layout = "~/Views/Shared/_Layout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<h1>Find</h1>

<style>



    #map {
        height: 100%;
    }

    /* Optional: Makes the sample page fill the window. */

    html,
    body {
        height: 100%;
        margin: 0;
        padding: 0;
    }
</style>
<link type=""text/css"" rel=""stylesheet"" href=""https://fonts.googleapis.com/css?family=Roboto:300,400,500"">
<style>
    #locationField,
    #controls {
        position: relative;
        width: 480px;
    }

    #autocomplete {
        position: absolute;
        top: 0px;
        left: 0px;
        width: 99%;
    }

    .label {
        text-align: right;
        font-weight: bold;
        width: 100px;
        color: #303030;
    }

    #address {
        border: 1px solid #000090;
        background-color: #f0f0ff;
        width: 480px;
        padding-right: 2px;
    }

        #address td {
            font-size: 10pt;
        }

    .field {
        width: 99%;
    }

    .slimField {
        width: 80px;
    }

    .wideFi");
            WriteLiteral("eld {\r\n        width: 200px;\r\n    }\r\n\r\n    #locationField {\r\n        height: 20px;\r\n        margin-bottom: 2px;\r\n    }\r\n</style>\r\n\r\n");
            WriteLiteral("\r\n\r\n\r\n\r\n\r\n    <div>\r\n        <h2>\r\n            Orign Location\r\n        </h2>\r\n    </div>\r\n    <div id=\"locationField\">\r\n        <input id=\"txtLocation\" , onclick=\"getlocation()\" placeholder=\"Enter your address\" type=\"text\">\r\n");
            WriteLiteral("\r\n");
            WriteLiteral("    </div>\r\n\r\n    <div>\r\n        <h2>\r\n            Destination Location\r\n        </h2>\r\n    </div>\r\n    <div id=\"locationField\">\r\n");
            WriteLiteral(@"        <input id=""txtLocationTwo"" placeholder=""Enter your address"" onclick=""getlocationTwo()"" type=""text"">
    </div>
    <br>
    <div>

        <input type=""text"" id=""txtResult"" />
        <div class=""form-group"">
            <button type=""button"" class=""btn btn-primary"" onclick=""FindDistance()"">Find Distance</button>
        </div>

    </div>

    <br>
    <div>
        <strong>Recommended Route Total Distance</strong>
    </div>
    <div id=""outputRecommended""></div>
    <div>
        <strong>Longeest Route Total Distance</strong>
    </div>
    <div id=""output""></div>





<!-- Replace the value of the key parameter with your own API key. -->


<script type=""text/javascript"">

    function FindDistance()
    {
        debugger;
        CalculateDistanceforAllAlternativeRoutes();

        var origin = document.getElementById('txtLocation');
        var destination = document.getElementById('txtLocationTwo');

        var geocoder = new google.maps.Geocoder();
    ");
            WriteLiteral(@"    var service = new google.maps.DistanceMatrixService();

        service.getDistanceMatrix({
            origins: [origin],
            destinations: [destination],
            travelMode: 'DRIVING',
            unitSystem: google.maps.UnitSystem.METRIC,
            avoidHighways: false,
            avoidTolls: false,
            avoidFerries: false

        }, function (response, status) {
            var originList = response.originAddresses;
            var destinationList = response.destinationAddresses;
            var outputDiv = document.getElementById('txtResult');
            outputDiv.innerHTML = '';
            //Display distance recommended value
            for (var i = 0; i < originList.length; i++) {
                var results = response.rows[i].elements;
                for (var j = 0; j < results.length; j++) {
                    outputDiv.innerHTML += originList[i] + ' to ' + destinationList[j] +
                        ': ' + results[j].distance.text + ' in ' +
  ");
            WriteLiteral(@"                      results[j].duration.text + '<br>';
                }
            }
        });

    }


   




    //function geolocate() {
    //    debugger;
    //    if (navigator.geolocation) {
    //        navigator.geolocation.getCurrentPosition(function (position) {
    //            var geolocation = {
    //                lat: position.coords.latitude,
    //                lng: position.coords.longitude
    //            };
    //            var circle = new google.maps.Circle({
    //                center: geolocation,
    //                radius: position.coords.accuracy
    //            });
    //            autocomplete.setBounds(circle.getBounds());
    //        });
    //    }
    //}

    function getlocation() {
        var places = new google.maps.places.Autocomplete(document.getElementById('txtLocation'));
        google.maps.event.addListener(places, 'place_changed', function () {
            var place = places.getPlace();
            L1 = p");
            WriteLiteral(@"lace.geometry.location.lat();
            Long1 = place.geometry.location.lng();

            var country;
            var city;
            var district;
            var Postal;
            var State;
            debugger;
            for (var i = 0; i < place.address_components.length; i++) {
                var find = false;
                for (var j = 0; j < place.address_components[i].types.length; j++) {
                    if (place.address_components[i].types[j] == ""postal_code"") {
                        Postal = place.address_components[i].long_name;
                    }

                    else if (place.address_components[i].types[j] == ""locality"") {
                        city = place.address_components[i].long_name;
                    }

                    else if (place.address_components[i].types[j] == ""administrative_area_level_2"") {

                        district = place.address_components[i].long_name;
                    }

                    else if (pla");
            WriteLiteral(@"ce.address_components[i].types[j] == ""administrative_area_level_1"") {
                        State = place.address_components[i].long_name;
                        //alert(State);
                        if (State !== null) {

                            $(""#drpList option:contains("" + State.toUpperCase() + "")"").attr('selected', 'selected');
                            //$(""#drpEmpList"").val(State).attr(""selected"", ""selected"");
                            // $(""#drpList"").val(State);
                            //$('select[name^=""salesrep""] option[value=""Bruce Jones""]').attr(""selected"", ""selected"");
                        }
                    }
                    else if (place.address_components[i].types[j] == ""country"") {
                        country = place.address_components[i].long_name;
                    }
                }
            }

            $(""#idPostal"").val(Postal);
            $(""#idCity"").val(city);
            $(""#idDistrict"").val(district);
            $(""#dr");
            WriteLiteral(@"pEmpList"").text(State);
            $(""#idcountry"").val(country);
            $(""#Latitude"").val(L1);
            $(""#Longitude"").val(Long1);
        });
    }

    function getlocationTwo() {
        debugger;
        var places = new google.maps.places.Autocomplete(document.getElementById('txtLocationTwo'));
        google.maps.event.addListener(places, 'place_changed', function () {
            /*  a = place;*/
            var place1 = places.getPlace();
            L2 = place1.geometry.location.lat();
            Long2 = place1.geometry.location.lng();
            var country;
            var city;
            var district;
            var Postal;
            var State;
            debugger;
            for (var i = 0; i < place1.address_components.length; i++) {
                var find = false;
                for (var j = 0; j < place1.address_components[i].types.length; j++) {
                    if (place1.address_components[i].types[j] == ""postal_code"") {
                   ");
            WriteLiteral(@"     Postal = place1.address_components[i].long_name;
                    }

                    else if (place1.address_components[i].types[j] == ""locality"") {
                        city = place1.address_components[i].long_name;
                    }

                    else if (place1.address_components[i].types[j] == ""administrative_area_level_2"") {

                        district = place1.address_components[i].long_name;
                    }

                    else if (place1.address_components[i].types[j] == ""administrative_area_level_1"") {
                        State = place1.address_components[i].long_name;
                        //alert(State);
                        if (State !== null) {
                            $(""#drpList1 option:contains("" + State.toUpperCase() + "")"").attr('selected', 'selected');
                            //$(""#drpEmpList"").val(State).attr(""selected"", ""selected"");
                            // $(""#drpList"").val(State);
                        ");
            WriteLiteral(@"    //$('select[name^=""salesrep""] option[value=""Bruce Jones""]').attr(""selected"", ""selected"");
                        }
                    }
                    else if (place1.address_components[i].types[j] == ""country"") {
                        country = place1.address_components[i].long_name;
                    }
                }
            }
            $(""#idPostal1"").val(Postal);
            $(""#idCity1"").val(city);
            $(""#idDistrict1"").val(district);
            $(""#drpEmpList1"").text(State);
            $(""#idcountry1"").val(country);
            $(""#Latitude1"").val(L2);
            $(""#Longitude1"").val(Long2);
        });
    }


    //function CalculatedRecommededDistance() {
    //    debugger;
    //    CalculateDistanceforAllAlternativeRoutes();

    //    var origin = document.getElementById('originautocomplete').value;
    //    var destination = document.getElementById('destinationautocomplete').value;

    //    var geocoder = new google.maps.Geocoder();");
            WriteLiteral(@"
    //    var service = new google.maps.DistanceMatrixService();

    //    service.getDistanceMatrix({
    //        origins: [origin],
    //        destinations: [destination],
    //        travelMode: 'DRIVING',
    //        unitSystem: google.maps.UnitSystem.METRIC,
    //        avoidHighways: false,
    //        avoidTolls: false,
    //        avoidFerries: false

    //    }, function (response, status) {
    //        var originList = response.originAddresses;
    //        var destinationList = response.destinationAddresses;
    //        var outputDiv = document.getElementById('outputRecommended');
    //        outputDiv.innerHTML = '';
    //        //Display distance recommended value
    //        for (var i = 0; i < originList.length; i++) {
    //            var results = response.rows[i].elements;
    //            for (var j = 0; j < results.length; j++) {
    //                outputDiv.innerHTML += originList[i] + ' to ' + destinationList[j] +
    //            ");
            WriteLiteral(@"        ': ' + results[j].distance.text + ' in ' +
    //                    results[j].duration.text + '<br>';
    //            }
    //        }
    //    });
    //}

    function CalculateDistanceforAllAlternativeRoutes() {
        debugger;
        var directionsService = new google.maps.DirectionsService();
        var start = document.getElementById('txtLocation').value;
        var end = document.getElementById('txtLocationTwo').value;
        var method = 'DRIVING';
        var request = {
            origin: start,
            destination: end,
            travelMode: google.maps.DirectionsTravelMode[method],
            provideRouteAlternatives: true,
            unitSystem: google.maps.UnitSystem.METRIC,
            optimizeWaypoints: true
        };

        directionsService.route(request, function (response, status) {
            var routes = response.routes;
            var distances = [];
            for (var i = 0; i < routes.length; i++) {

                var di");
            WriteLiteral(@"stance = 0;
                for (j = 0; j < routes[i].legs.length; j++) {
                    distance = parseInt(routes[i].legs[j].distance.value) + parseInt(distance);
                    //for each 'leg'(route between two waypoints) we get the distance and add it to
                }
                //Convert into kilometer
                distances.push(distance / 1000);
            }
            //Get all the alternative distances
            var maxDistance = distances.sort(function (a, b) {
                return a - b;
            });
            //Display distance having highest value.
            var outputDiv = document.getElementById('txtResult');
            outputDiv.innerHTML = Math.round(maxDistance[routes.length - 1]) + "" KM"";
        });
    }



</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
