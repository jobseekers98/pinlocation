
@{
    ViewData["Title"] = "Find";
<<<<<<< HEAD
=======
    Layout = "~/Views/Shared/_Layout.cshtml";
>>>>>>> 0b223b98b787ebdefe9aedb40b9800ada9b919d8
}

<h1>Find</h1>

<<<<<<< HEAD
<div class="row">
    <div class="col-md-12">
        <h2>Example 1 - simple distance between two points</h2>
        <p>
            This demonstrates getting and displaying the distance between two points
        </p>

        <div> Add Destination</div>
        <div>
            <input id="travelto" type="text" name="name" />
            <input type="button" value="Add" onclick="PushDestination()" />
            <a href="#" onclick="setDestination('Tagmere, UK')">Tagmere, UK. </a>
            <a href="#" onclick="setDestination('Bosham, UK')">Bosham, UK</a>
        </div>
        <div id="destinations"></div><br />
        Source : <input id="travelfrom" type="text" name="name" value="Chichester, UK" />

        <input type="button" value="Calculate" onclick="GetRoute()" />
        <p></p>
        <br />
        <div id="dvDistance">
            <table id="tblResults" border="1" cellpadding="10">
                <tr>
                    <th> Start </th>
                    <th> End </th>
                    <th> Distance </th>
                    <th> Duration </th>
                </tr>
            </table>

        </div>

        <div id="dvMap" style="min-height:500px"></div>
    </div>
</div>>

<script type="text/javascript">
    var source, destination;

    var locations = [];
    var directionsDisplay;
    var directionsService;
    $(document).ready(function () {

        var map = new google.maps.Map(document.getElementById('dvMap'), {
            center: { lat: 50.834697, lng: -0.773792 },
            zoom: 13,
            mapTypeId: 'roadmap'
        });
        directionsService = new google.maps.DirectionsService();
       
    });

    // initialise the location of the map on Chichester in England (ref lat and lng)


    function PushDestination() {
        destination = document.getElementById("travelto").value;
        locations.push(destination);
        document.getElementById("travelto").value = "";
        destinationArray = document.getElementById("destinations");
        destinationArray.innerHTML += destination + "<br />";
    }


    function setDestination(dest) {
        document.getElementById('travelto').value = dest;
        PushDestination();
    }

    function GetRoute() {

        directionsDisplay.setMap(map);

        source = document.getElementById("travelfrom").value;
        destination = document.getElementById("travelto").value;
=======
<style>



    #map {
        height: 100%;
    }

    /* Optional: Makes the sample page fill the window. */

    html,
    body {
        height: 100%;
        margin: 0;
        padding: 0;
    }
</style>
<link type="text/css" rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500">
<style>
    #locationField,
    #controls {
        position: relative;
        width: 480px;
    }

    #autocomplete {
        position: absolute;
        top: 0px;
        left: 0px;
        width: 99%;
    }

    .label {
        text-align: right;
        font-weight: bold;
        width: 100px;
        color: #303030;
    }

    #address {
        border: 1px solid #000090;
        background-color: #f0f0ff;
        width: 480px;
        padding-right: 2px;
    }

        #address td {
            font-size: 10pt;
        }

    .field {
        width: 99%;
    }

    .slimField {
        width: 80px;
    }

    .wideField {
        width: 200px;
    }

    #locationField {
        height: 20px;
        margin-bottom: 2px;
    }
</style>

@*<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAOaWuSw6Y1KUo6XXGKfwcLah5awnn4tNU&libraries=places&callback=initAutocomplete" async defer></script>*@





    <div>
        <h2>
            Orign Location
        </h2>
    </div>
    <div id="locationField">
        <input id="txtLocation" , onclick="getlocation()" placeholder="Enter your address" type="text">
        @*<input id="originautocomplete" placeholder="Enter your address" onFocus="geolocate()" type="text">*@

        @*@Html.TextBoxFor(m => m.Address1, new { @class = "form-control", @id = "txtLocation", @onclick = "getlocation()" })*@
    </div>

    <div>
        <h2>
            Destination Location
        </h2>
    </div>
    <div id="locationField">
        @*<input id="destinationautocomplete" placeholder="Enter your address" onFocus="geolocate()" type="text">*@
        <input id="txtLocationTwo" placeholder="Enter your address" onclick="getlocationTwo()" type="text">
    </div>
    <br>
    <div>

        <input type="text" id="txtResult" />
        <div class="form-group">
            <button type="button" class="btn btn-primary" onclick="FindDistance()">Find Distance</button>
        </div>

    </div>

    <br>
    <div>
        <strong>Recommended Route Total Distance</strong>
    </div>
    <div id="outputRecommended"></div>
    <div>
        <strong>Longeest Route Total Distance</strong>
    </div>
    <div id="output"></div>





<!-- Replace the value of the key parameter with your own API key. -->


<script type="text/javascript">

    function FindDistance()
    {
        debugger;
        CalculateDistanceforAllAlternativeRoutes();

        var origin = document.getElementById('txtLocation');
        var destination = document.getElementById('txtLocationTwo');

        var geocoder = new google.maps.Geocoder();
        var service = new google.maps.DistanceMatrixService();

        service.getDistanceMatrix({
            origins: [origin],
            destinations: [destination],
            travelMode: 'DRIVING',
            unitSystem: google.maps.UnitSystem.METRIC,
            avoidHighways: false,
            avoidTolls: false,
            avoidFerries: false

        }, function (response, status) {
            var originList = response.originAddresses;
            var destinationList = response.destinationAddresses;
            var outputDiv = document.getElementById('txtResult');
            outputDiv.innerHTML = '';
            //Display distance recommended value
            for (var i = 0; i < originList.length; i++) {
                var results = response.rows[i].elements;
                for (var j = 0; j < results.length; j++) {
                    outputDiv.innerHTML += originList[i] + ' to ' + destinationList[j] +
                        ': ' + results[j].distance.text + ' in ' +
                        results[j].duration.text + '<br>';
                }
            }
        });
>>>>>>> 0b223b98b787ebdefe9aedb40b9800ada9b919d8

    }


<<<<<<< HEAD
    //var waypoints = [];
    //for (var i = 0; i < locations.length; i++) {
    //    var address = locations[i];
    //    if (address !== "") {
    //        waypoints.push({
    //            location: address,
    //            stopover: true
=======
   




    //function geolocate() {
    //    debugger;
    //    if (navigator.geolocation) {
    //        navigator.geolocation.getCurrentPosition(function (position) {
    //            var geolocation = {
    //                lat: position.coords.latitude,
    //                lng: position.coords.longitude
    //            };
    //            var circle = new google.maps.Circle({
    //                center: geolocation,
    //                radius: position.coords.accuracy
    //            });
    //            autocomplete.setBounds(circle.getBounds());
>>>>>>> 0b223b98b787ebdefe9aedb40b9800ada9b919d8
    //        });
    //    }
    //}

<<<<<<< HEAD

    //var service = new google.maps.DistanceMatrixService();
    //service.getDistanceMatrix({
    //    origins: [source],
    //    destinations: [destination],
    //    travelMode: google.maps.TravelMode.DRIVING,
    //    unitSystem: google.maps.UnitSystem.METRIC,
    //    avoidHighways: false,
    //    avoidTolls: false



    //}, request = {
    //    origin: source,
    //    destination: waypoints[0].location,
    //    waypoints: waypoints, //an array of waypoints
    //    optimizeWaypoints: true, //set to true if you want google to determine the
    //    // shortest route or false to use the order specified.
    //    travelMode: google.maps.DirectionsTravelMode.DRIVING
    //});


    //directionsService.route(request, function (response, status) {
    //    if (status == google.maps.DirectionsStatus.OK) {
    //        var dvDistance = document.getElementById("dvDistance");
    //        var distance = 0;
    //        var minute = 0.00;
    //        response.routes[0].legs.forEach(function (item, index) {
    //            if (index < response.routes[0].legs.length - 1) {
    //                distance = distance + parseInt(item.distance.text);
    //                minute = parseFloat(minute) + parseFloat(item.duration.value / 60);

    //                tbl = document.getElementById("tblResults");
    //                var row = tbl.insertRow(1);
    //                var cell = row.insertCell(0);
    //                cell.innerText = source;
    //                var cell = row.insertCell(1);
    //                cell.innerText = item.end_address;
    //                var cell = row.insertCell(2);
    //                cell.innerText = distance;
    //                var cell = row.insertCell(3);
    //                cell.innerText = minute.toFixed(2) + " min";
    //            }
    //        });
    //        directionsDisplay.setDirections(response);
    //    }
    //    else {
    //        //handle error
    //    }
    //})
</script>
=======
    function getlocation() {
        var places = new google.maps.places.Autocomplete(document.getElementById('txtLocation'));
        google.maps.event.addListener(places, 'place_changed', function () {
            var place = places.getPlace();
            L1 = place.geometry.location.lat();
            Long1 = place.geometry.location.lng();

            var country;
            var city;
            var district;
            var Postal;
            var State;
            debugger;
            for (var i = 0; i < place.address_components.length; i++) {
                var find = false;
                for (var j = 0; j < place.address_components[i].types.length; j++) {
                    if (place.address_components[i].types[j] == "postal_code") {
                        Postal = place.address_components[i].long_name;
                    }

                    else if (place.address_components[i].types[j] == "locality") {
                        city = place.address_components[i].long_name;
                    }

                    else if (place.address_components[i].types[j] == "administrative_area_level_2") {

                        district = place.address_components[i].long_name;
                    }

                    else if (place.address_components[i].types[j] == "administrative_area_level_1") {
                        State = place.address_components[i].long_name;
                        //alert(State);
                        if (State !== null) {

                            $("#drpList option:contains(" + State.toUpperCase() + ")").attr('selected', 'selected');
                            //$("#drpEmpList").val(State).attr("selected", "selected");
                            // $("#drpList").val(State);
                            //$('select[name^="salesrep"] option[value="Bruce Jones"]').attr("selected", "selected");
                        }
                    }
                    else if (place.address_components[i].types[j] == "country") {
                        country = place.address_components[i].long_name;
                    }
                }
            }

            $("#idPostal").val(Postal);
            $("#idCity").val(city);
            $("#idDistrict").val(district);
            $("#drpEmpList").text(State);
            $("#idcountry").val(country);
            $("#Latitude").val(L1);
            $("#Longitude").val(Long1);
        });
    }

    function getlocationTwo() {
        debugger;
        var places = new google.maps.places.Autocomplete(document.getElementById('txtLocationTwo'));
        google.maps.event.addListener(places, 'place_changed', function () {
            /*  a = place;*/
            var place1 = places.getPlace();
            L2 = place1.geometry.location.lat();
            Long2 = place1.geometry.location.lng();
            var country;
            var city;
            var district;
            var Postal;
            var State;
            debugger;
            for (var i = 0; i < place1.address_components.length; i++) {
                var find = false;
                for (var j = 0; j < place1.address_components[i].types.length; j++) {
                    if (place1.address_components[i].types[j] == "postal_code") {
                        Postal = place1.address_components[i].long_name;
                    }

                    else if (place1.address_components[i].types[j] == "locality") {
                        city = place1.address_components[i].long_name;
                    }

                    else if (place1.address_components[i].types[j] == "administrative_area_level_2") {

                        district = place1.address_components[i].long_name;
                    }

                    else if (place1.address_components[i].types[j] == "administrative_area_level_1") {
                        State = place1.address_components[i].long_name;
                        //alert(State);
                        if (State !== null) {
                            $("#drpList1 option:contains(" + State.toUpperCase() + ")").attr('selected', 'selected');
                            //$("#drpEmpList").val(State).attr("selected", "selected");
                            // $("#drpList").val(State);
                            //$('select[name^="salesrep"] option[value="Bruce Jones"]').attr("selected", "selected");
                        }
                    }
                    else if (place1.address_components[i].types[j] == "country") {
                        country = place1.address_components[i].long_name;
                    }
                }
            }
            $("#idPostal1").val(Postal);
            $("#idCity1").val(city);
            $("#idDistrict1").val(district);
            $("#drpEmpList1").text(State);
            $("#idcountry1").val(country);
            $("#Latitude1").val(L2);
            $("#Longitude1").val(Long2);
        });
    }


    //function CalculatedRecommededDistance() {
    //    debugger;
    //    CalculateDistanceforAllAlternativeRoutes();

    //    var origin = document.getElementById('originautocomplete').value;
    //    var destination = document.getElementById('destinationautocomplete').value;

    //    var geocoder = new google.maps.Geocoder();
    //    var service = new google.maps.DistanceMatrixService();

    //    service.getDistanceMatrix({
    //        origins: [origin],
    //        destinations: [destination],
    //        travelMode: 'DRIVING',
    //        unitSystem: google.maps.UnitSystem.METRIC,
    //        avoidHighways: false,
    //        avoidTolls: false,
    //        avoidFerries: false

    //    }, function (response, status) {
    //        var originList = response.originAddresses;
    //        var destinationList = response.destinationAddresses;
    //        var outputDiv = document.getElementById('outputRecommended');
    //        outputDiv.innerHTML = '';
    //        //Display distance recommended value
    //        for (var i = 0; i < originList.length; i++) {
    //            var results = response.rows[i].elements;
    //            for (var j = 0; j < results.length; j++) {
    //                outputDiv.innerHTML += originList[i] + ' to ' + destinationList[j] +
    //                    ': ' + results[j].distance.text + ' in ' +
    //                    results[j].duration.text + '<br>';
    //            }
    //        }
    //    });
    //}

    function CalculateDistanceforAllAlternativeRoutes() {
        debugger;
        var directionsService = new google.maps.DirectionsService();
        var start = document.getElementById('txtLocation').value;
        var end = document.getElementById('txtLocationTwo').value;
        var method = 'DRIVING';
        var request = {
            origin: start,
            destination: end,
            travelMode: google.maps.DirectionsTravelMode[method],
            provideRouteAlternatives: true,
            unitSystem: google.maps.UnitSystem.METRIC,
            optimizeWaypoints: true
        };

        directionsService.route(request, function (response, status) {
            var routes = response.routes;
            var distances = [];
            for (var i = 0; i < routes.length; i++) {

                var distance = 0;
                for (j = 0; j < routes[i].legs.length; j++) {
                    distance = parseInt(routes[i].legs[j].distance.value) + parseInt(distance);
                    //for each 'leg'(route between two waypoints) we get the distance and add it to
                }
                //Convert into kilometer
                distances.push(distance / 1000);
            }
            //Get all the alternative distances
            var maxDistance = distances.sort(function (a, b) {
                return a - b;
            });
            //Display distance having highest value.
            var outputDiv = document.getElementById('txtResult');
            outputDiv.innerHTML = Math.round(maxDistance[routes.length - 1]) + " KM";
        });
    }



</script>
>>>>>>> 0b223b98b787ebdefe9aedb40b9800ada9b919d8
