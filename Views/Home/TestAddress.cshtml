@model WebApplication2.Models.AddressVM
@{
    ViewData["Title"] = "TestAddress";
}

<h1>
    TestAddress
</h1>

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
    @*<input type="text" id="txtLocation" name="txtLocation" onclick="getlocation()"><br>*@
</div>

<style>
    #div1 {
        background-color: cadetblue;
        width: 33.33%;
        float: right;
        height: 900px;
    }

    #div2 {
        background-color: cadetblue;
        width: 33.33%;
        float: left;
        height: 900px;
    }

    #div3 {
        background-color: cadetblue;
        width: 33.33%;
        margin: 0 auto;
        height: 900px;
    }
</style>



<form id="studenteForm">

    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    
    <div id="div2">

        <div class="form-group">
            @Html.LabelFor(model => model.Address1, htmlAttributes: new
            {
               @class = "control-label col-md-2"
              })
            @Html.TextBoxFor(m => m.Address1, new { @class = "form-control", @id = "txtLocation", @onclick = "getlocation()" })
            @Html.ValidationMessageFor(model => model.Address1, "", new { @class = "text-danger" })

            @*<input type="text" id="idAddress" name="idAddress" onclick="getlocation()"><br>*@
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.Longitude, htmlAttributes: new
        {
           @class = "control-label col-md-2"
        })
            @Html.TextBoxFor(m => m.Longitude, new { @class = "form-control", id = "Longitude", placeholder = "Enter Longitude" })
            @Html.ValidationMessageFor(model => model.Longitude, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Latitude, htmlAttributes: new
         {
           @class = "control-label col-md-2"
         })
            @Html.TextBoxFor(m => m.Latitude, new { @class = "form-control", id = "Latitude", placeholder = "Enter Latitude" })
            @Html.ValidationMessageFor(model => model.Latitude, "", new { @class = "text-danger" })

        </div>


        <div class="form-group">

            @Html.LabelFor(model => model.Postal, htmlAttributes: new
            {
                 @class = "control-label col-md-2"
             })
            @Html.TextBoxFor(m => m.Postal, new { @class = "form-control", id = "idPostal", placeholder = "Enter Postalcode" })
            @Html.ValidationMessageFor(model => model.Postal, "", new { @class = "text-danger" })

        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StateId, htmlAttributes: new
           {
               @class = "control-label col-md-2"
           })

            @Html.DropDownListFor(m => m.StateId, new SelectList(Model.StateDropDownList != null ? Model.StateDropDownList : new List<StateMaster>(), "StateId", "StateName"), new { @class = "form-control", id = "drpList" })
            @Html.ValidationMessageFor(model => model.StateId, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.country, htmlAttributes: new
            {
            @class = "control-label col-md-2"
            })
            @Html.TextBoxFor(m => m.country, new { @class = "form-control", id = "idcountry", placeholder = "Enter country" })
            @Html.ValidationMessageFor(model => model.country, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.City, htmlAttributes: new
            {
              @class = "control-label col-md-2"
            })
            @Html.TextBoxFor(m => m.City, new { @class = "form-control", id = "idCity", placeholder = "Enter City" })
            @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.District, htmlAttributes: new
            {
              @class = "control-label col-md-2"
            })
            @Html.TextBoxFor(m => m.District, new { @class = "form-control", id = "idDistrict", placeholder = "Enter District" })
            @Html.ValidationMessageFor(model => model.District, "", new { @class = "text-danger" })
        </div>

    </div>
       
    <div id="div3">
        <div class="form-group">
            @Html.LabelFor(model => model.Address2, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.Address2, new { @class = "form-control", @id = "txtLocationTwo", @onclick = "getlocationTwo()" })
                @Html.ValidationMessageFor(model => model.Address2, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.Longitude1, htmlAttributes: new
            {
                 @class = "control-label col-md-2"
             })
            @Html.TextBoxFor(m => m.Longitude1, new { @class = "form-control", id = "Longitude1", placeholder = "Enter Longitude" })
            @Html.ValidationMessageFor(model => model.Longitude, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Latitude1, htmlAttributes: new
            {
                 @class = "control-label col-md-2"
             })
            @Html.TextBoxFor(m => m.Latitude1, new { @class = "form-control", id = "Latitude1", placeholder = "Enter Latitude" })
            @Html.ValidationMessageFor(model => model.Latitude, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">

            @Html.LabelFor(model => model.Postal1, htmlAttributes: new
            {
                 @class = "control-label col-md-2"
             })
            @Html.TextBoxFor(m => m.Postal1, new { @class = "form-control", id = "idPostal1", placeholder = "Enter Postalcode" })
            @Html.ValidationMessageFor(model => model.Postal, "", new { @class = "text-danger" })

        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StateId1, htmlAttributes: new
           {
               @class = "control-label col-md-2"
           })

            @Html.DropDownListFor(m => m.StateId1, new SelectList(Model.StateDropDownList != null ? Model.StateDropDownList : new List<StateMaster>(), "StateId", "StateName"), new { @class = "form-control", id = "drpList1" })
            @Html.ValidationMessageFor(model => model.StateId, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.country1, htmlAttributes: new
            {
            @class = "control-label col-md-2"
            })
            @Html.TextBoxFor(m => m.country1, new { @class = "form-control", id = "idcountry1", placeholder = "Enter country" })
            @Html.ValidationMessageFor(model => model.country1, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.City1, htmlAttributes: new
            {
              @class = "control-label col-md-2"
            })
            @Html.TextBoxFor(m => m.City1, new { @class = "form-control", id = "idCity1", placeholder = "Enter City" })
            @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.District1, htmlAttributes: new
            {
              @class = "control-label col-md-2"
            })
            @Html.TextBoxFor(m => m.District1, new { @class = "form-control", id = "idDistrict1", placeholder = "Enter District" })
            @Html.ValidationMessageFor(model => model.District1, "", new { @class = "text-danger" })
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Distance, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @*<input type="text" id="txtResult" />*@

<<<<<<< HEAD
            @Html.TextBoxFor(model => model.Distance, new { @class = "form-control", id = "txtResult", placeholder = "Enter Distance" })
=======
                @Html.TextBoxFor(model => model.Distance, new { @class = "form-control", id = "txtResult", })
>>>>>>> 0b223b98b787ebdefe9aedb40b9800ada9b919d8
                @Html.ValidationMessageFor(model => model.Distance, "", new { @class = "text-danger" })
            </div>
        </div>


        <div>
            <input type="button" class="btn btn-primary" onclick="submitStudent()" value="Submit" />
        </div>

    </div>

    
</form>



@*<script src="~/js/SearchLocation.js?v=1"></script>*@


<script type="text/javascript">

    //var a;
    //function getlocation() {
    //    debugger;
    //    //var options = {
    //    //    types: ['(cities)'],
    //    //    componentRestrictions: { country: "us" }
    //    //};
    //    var places = new google.maps.places.Autocomplete(document.getElementById('txtLocation'));
    //    google.maps.event.addListener(places, 'place_changed', function () {
    //        var place = places.getPlace();
    //        var latitude = place.geometry.location.lat();
    //        var longitude = place.geometry.location.lng();
    //        //var address = place.formatted_address;
    //        //var strArray = address.split(',');
    //        //var Addarr = strArray[0] + strArray[1] + strArray[2];
    //        //("#txtLocation").val(Addarr);


    //        var country;
    //        var city;
    //        var district;
    //        var Postal;
    //        var State;
    //        debugger;
    //        for (var i = 0; i < place.address_components.length; i++) {
    //            var find = false;
    //            for (var j = 0; j < place.address_components[i].types.length; j++) {
    //                if (place.address_components[i].types[j] == "postal_code") {
    //                    Postal = place.address_components[i].long_name;
    //                }

    //                else if (place.address_components[i].types[j] == "locality") {
    //                    city = place.address_components[i].long_name;
    //                }

    //                else if (place.address_components[i].types[j] == "administrative_area_level_2") {

    //                    district = place.address_components[i].long_name;
    //                }

    //                else if (place.address_components[i].types[j] == "administrative_area_level_1") {
    //                    State = place.address_components[i].long_name;
    //                    //alert(State);
    //                    if (State !== null) {
    //                        $("#drpList option:contains(" + State.toUpperCase() + ")").attr('selected', 'selected');
    //                        //$("#drpEmpList").val(State).attr("selected", "selected");
    //                        // $("#drpList").val(State);
    //                        //$('select[name^="salesrep"] option[value="Bruce Jones"]').attr("selected", "selected");
    //                    }
    //                }
    //                else if (place.address_components[i].types[j] == "country") {
    //                    country = place.address_components[i].long_name;
    //                }
    //            }
    //        }

    //        debugger;

    //        $("#idPostal").val(Postal);
    //        $("#idCity").val(city);
    //        $("#idDistrict").val(district);
    //        $("#drpEmpList").text(State);
    //        $("#idcountry").val(country);
    //        $("#Latitude").val(latitude);
    //        $("#Longitude").val(longitude);
    //       // $("#txtResult").val(Dis);
            
    //        /* $("#txtLocation").val(Addarr);

    //        var txt = $('#txtLocation');
    //        if (txt.val() != null && txt.val() != '') {
    //         alert('Please enter text')
    //        }
    //         */

    //    });
    //}


    //function getlocationTwo() {
    //    var places = new google.maps.places.Autocomplete(document.getElementById('txtLocationTwo'));
    //    google.maps.event.addListener(places, 'place_changed', function () {
    //        a = place;
    //        var place = places.getPlace();
    //        L2 = place.geometry.location.lat();
    //        Long2 = place.geometry.location.lng();
    //    });

    //}

    //function submitStudent() {
    //    debugger;
    //   // toastr.options.onclick = function (result) { alert(this.data.msg); }
    //    var result = distance(L1, Long1, L2, Long2);
    //    console.log(result);
    //    $("#txtResult").val(result);
    //    var data = $("#studenteForm").serialize();
    //    console.log(data);
    //    alert(data);
    //    $.ajax({
    //        type: 'POST',
    //        url: '/Home/TestAddress',
    //        contentType: 'application/x-www-form-urlencoded; charset=UTF-8', // when we use .serialize() this generates the data in query string format. this needs the default contentType (default content type is: contentType: 'application/x-www-form-urlencoded; charset=UTF-8') so it is optional, you can remove it
    //        data: data,
    //        success: function (result)
    //        {
    //            alert('Successfully received Data ');
    //            console.log(result);
    //        },
    //        error: function () {
    //            alert('Failed to receive the Data');
    //            console.log('Failed ');
    //        }

    //    })
    //}

    //var a;
    //var L1;
    //var Long1;
    //var L2;
    //var Long2;


    //function FindDistance() {
    //    var result = distance(L1, Long1, L2, Long2);
    //    console.log(result);
    //    $("#txtResult").val(result);
    //}


    //function distance(lat1, lon1, lat2, lon2, unit = "k") {
    //    debugger;
    //    if ((lat1 == lat2) && (lon1 == lon2)) {
    //        return 0;
    //    }
    //    else {
    //        var radlat1 = Math.PI * lat1 / 180;
    //        var radlat2 = Math.PI * lat2 / 180;
    //        var theta = lon1 - lon2;
    //        var radtheta = Math.PI * theta / 180;
    //        var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);
    //        if (dist > 1) {
    //            dist = 1;
    //        }
    //        dist = Math.acos(dist);
    //        dist = dist * 180 / Math.PI;
    //        dist = dist * 60 * 1.1515;
    //        if (unit == "K") { dist = dist * 1.609344 }
    //        if (unit == "N") { dist = dist * 0.8684 }
    //        return dist;
    //    }
    //}

    var a;
    var L1;
    var Long1;
    var L2;
    var Long2;

    function getlocation() {
        var places = new google.maps.places.Autocomplete(document.getElementById('txtLocation'));
        google.maps.event.addListener(places, 'place_changed', function () {
            var place = places.getPlace();
            L1 = place.geometry.location.lat();
            Long1 = place.geometry.location.lng();

            var country;
            var city;
            var district;
            var Postal;
            var State;
            debugger;
            for (var i = 0; i < place.address_components.length; i++) {
                var find = false;
                for (var j = 0; j < place.address_components[i].types.length; j++) {
                    if (place.address_components[i].types[j] == "postal_code") {
                        Postal = place.address_components[i].long_name;
                    }

                    else if (place.address_components[i].types[j] == "locality") {
                        city = place.address_components[i].long_name;
                    }

                    else if (place.address_components[i].types[j] == "administrative_area_level_2") {

                        district = place.address_components[i].long_name;
                    }

                    else if (place.address_components[i].types[j] == "administrative_area_level_1") {
                        State = place.address_components[i].long_name;
                        //alert(State);
                        if (State !== null) {

                            $("#drpList option:contains(" + State.toUpperCase() + ")").attr('selected', 'selected');
                            //$("#drpEmpList").val(State).attr("selected", "selected");
                            // $("#drpList").val(State);
                            //$('select[name^="salesrep"] option[value="Bruce Jones"]').attr("selected", "selected");
                        }
                    }
                    else if (place.address_components[i].types[j] == "country") {
                        country = place.address_components[i].long_name;
                    }
                }
            }

            $("#idPostal").val(Postal);
            $("#idCity").val(city);
            $("#idDistrict").val(district);
            $("#drpEmpList").text(State);
            $("#idcountry").val(country);
            $("#Latitude").val(L1);
            $("#Longitude").val(Long1);
        });
    }
    function getlocationTwo()
    {
        debugger;
        var places = new google.maps.places.Autocomplete(document.getElementById('txtLocationTwo'));
        google.maps.event.addListener(places, 'place_changed', function () {
          /*  a = place;*/
            var place1 = places.getPlace();
            L2 = place1.geometry.location.lat();
            Long2 = place1.geometry.location.lng();
        var country;
        var city;
        var district;
        var Postal;
        var State;
        debugger;
        for (var i = 0; i < place1.address_components.length; i++) {
            var find = false;
            for (var j = 0; j < place1.address_components[i].types.length; j++) {
                if (place1.address_components[i].types[j] == "postal_code") {
                    Postal = place1.address_components[i].long_name;
                }

                else if (place1.address_components[i].types[j] == "locality") {
                    city = place1.address_components[i].long_name;
                }

                else if (place1.address_components[i].types[j] == "administrative_area_level_2") {

                    district = place1.address_components[i].long_name;
                }

                else if (place1.address_components[i].types[j] == "administrative_area_level_1") {
                    State = place1.address_components[i].long_name;
                    //alert(State);
                    if (State !== null) {
                        $("#drpList1 option:contains(" + State.toUpperCase() + ")").attr('selected', 'selected');
                        //$("#drpEmpList").val(State).attr("selected", "selected");
                        // $("#drpList").val(State);
                        //$('select[name^="salesrep"] option[value="Bruce Jones"]').attr("selected", "selected");
                    }
                }
                else if (place1.address_components[i].types[j] == "country") {
                    country = place1.address_components[i].long_name;
                }
            }
        }
        $("#idPostal1").val(Postal);
        $("#idCity1").val(city);
        $("#idDistrict1").val(district);
        $("#drpEmpList1").text(State);
        $("#idcountry1").val(country);
        $("#Latitude1").val(L2);
        $("#Longitude1").val(Long2);
        });
    }


    function distance(lat1, lon1, lat2, lon2, unit) {
        debugger;
        if ((lat1 == lat2) && (lon1 == lon2))
        {
            return 0;
        }

        else {
            var radlat1 = Math.PI * lat1 / 180;
            var radlat2 = Math.PI * lat2 / 180;
            var theta = lon1 - lon2;
            var radtheta = Math.PI * theta / 180;
            var dist = Math.sin(radlat1) * Math.sin(radlat2) + Math.cos(radlat1) * Math.cos(radlat2) * Math.cos(radtheta);
            if (dist > 1) {
                dist = 1;
            }
            dist = Math.acos(dist);
            dist = dist * 180 / Math.PI;
            dist = dist * 60 * 1.1515;
            if (unit == "K") { dist = dist * 1.609344 }

            if (unit == "N") { dist = dist * 0.8684 }
            if (unit == "M") { dist = dist}
            return dist;
        }
    }



    function submitStudent() {
        debugger;
        var result = distance(L1, Long1, L2, Long2);
        console.log(result);
        $("#txtResult").val(result);

        var data = $("#studenteForm").serialize();
        if (!$("#studenteForm").valid())
        {
            return false;
        }

       // console.log(data);
       // alert(data);
        $.ajax({
            type: 'POST',
            url: '/Home/TestAddress',
            contentType: 'application/x-www-form-urlencoded; charset=UTF-8', // when we use .serialize() this generates the data in query string format. this needs the default contentType (default content type is: contentType: 'application/x-www-form-urlencoded; charset=UTF-8') so it is optional, you can remove it
            data: data,
            success: function (result)
            {
                //toastr.success('Successfully received Data ');
                toastr.success('Successfully received Data')
                //alert('Successfully received Data ');
                console.log(result);
            },
            error: function () {
                alert('Failed to receive the Data');
                console.log('Failed ');
            }
        })
    }


</script>
