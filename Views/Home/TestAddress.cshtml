@model WebApplication2.Models.AddressVM
@{
    ViewData["Title"] = "TestAddress";
}

<h1>
    TestAddress
</h1>

<style>

    #div1 {
        background-color: skyblue;
        width: 33.33%;
        float: right
    }

    #dvMap {
        background-color: yellow;
        width: 33.33%;
        float: right
    }

    #div3 {
        background-color: skyblue;
        width: 33.33%;
        margin: 0 auto;
    }
</style>


<<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>-->
    @*<input type="text" id="txtLocation" name="txtLocation" onclick="getlocation()"><br>*@

    <form id="studenteForm">


        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div id="div1">

            <div class="=form-group">
                @Html.LabelFor(model => model.Address1, htmlAttributes: new
             {
               @class = "control-label col-md-2"
             })
                @*<input type="text" id="txtLocation" name="txtLocation" onclick="getlocation()"><br>*@
                @Html.TextBoxFor(m => m.Address1, new { @class = "form-control", @id = "txtLocation", onclick = "getlocation()" })
                @Html.ValidationMessageFor(model => model.Address1, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Longitude, htmlAttributes: new
                {
                     @class = "control-label col-md-2"
                 })
                @Html.TextBoxFor(m => m.Longitude, new { @class = "form-control", id = "Longitude", placeholder = "Enter Longitude" })
                @Html.ValidationMessageFor(model => model.Longitude, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Latitude, htmlAttributes: new
                {
                     @class = "control-label col-md-2"
                 })
                @Html.TextBoxFor(m => m.Latitude, new { @class = "form-control", id = "Latitude", placeholder = "Enter Latitude" })
                @Html.ValidationMessageFor(model => model.Latitude, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">

                @Html.LabelFor(model => model.Postal, htmlAttributes: new
                {
                     @class = "control-label col-md-2"
                 })
                @Html.TextBoxFor(m => m.Postal, new { @class = "form-control", id = "idPostal", placeholder = "Enter Postalcode" })
                @Html.ValidationMessageFor(model => model.Postal, "", new { @class = "text-danger" })

            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.StateId, htmlAttributes: new
               {
                   @class = "control-label col-md-2"
               })

                @Html.DropDownListFor(m => m.StateId, new SelectList(Model.StateDropDownList != null ? Model.StateDropDownList : new List<StateMaster>(), "StateId", "StateName"), new { @class = "form-control", id = "drpList" })
                @Html.ValidationMessageFor(model => model.StateId, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.country, htmlAttributes: new
                {
                @class = "control-label col-md-2"
                })
                @Html.TextBoxFor(m => m.country, new { @class = "form-control", id = "idcountry", placeholder = "Enter country" })
                @Html.ValidationMessageFor(model => model.country, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.City, htmlAttributes: new
                {
                  @class = "control-label col-md-2"
                })
                @Html.TextBoxFor(m => m.City, new { @class = "form-control", id = "idCity", placeholder = "Enter City" })
                @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.District, htmlAttributes: new
                {
                  @class = "control-label col-md-2"
                })
                @Html.TextBoxFor(m => m.District, new { @class = "form-control", id = "idDistrict", placeholder = "Enter District" })
                @Html.ValidationMessageFor(model => model.District, "", new { @class = "text-danger" })
            </div>


        </div>

        <div id="div3">

            <div class="form-group">
                @Html.LabelFor(model => model.Address2, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.Address2, new { @class = "form-control", @id = "txtLocationTwo", @onclick = "getlocationTwo()" })
                    @Html.ValidationMessageFor(model => model.Address2, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.Longitude1, htmlAttributes: new
                {
                     @class = "control-label col-md-2"
                 })
                @Html.TextBoxFor(m => m.Longitude1, new { @class = "form-control", id = "Longitude1", placeholder = "Enter Longitude" })
                @Html.ValidationMessageFor(model => model.Longitude, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Latitude1, htmlAttributes: new
                {
                     @class = "control-label col-md-2"
                 })
                @Html.TextBoxFor(m => m.Latitude1, new { @class = "form-control", id = "Latitude1", placeholder = "Enter Latitude" })
                @Html.ValidationMessageFor(model => model.Latitude, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">

                @Html.LabelFor(model => model.Postal1, htmlAttributes: new
                {
                     @class = "control-label col-md-2"
                 })
                @Html.TextBoxFor(m => m.Postal1, new { @class = "form-control", id = "idPostal1", placeholder = "Enter Postalcode" })
                @Html.ValidationMessageFor(model => model.Postal, "", new { @class = "text-danger" })

            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.StateId1, htmlAttributes: new
               {
                   @class = "control-label col-md-2"
               })

                @Html.DropDownListFor(m => m.StateId1, new SelectList(Model.StateDropDownList != null ? Model.StateDropDownList : new List<StateMaster>(), "StateId", "StateName"), new { @class = "form-control", id = "drpList1" })
                @Html.ValidationMessageFor(model => model.StateId, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.country1, htmlAttributes: new
                {
                @class = "control-label col-md-2"
                })
                @Html.TextBoxFor(m => m.country1, new { @class = "form-control", id = "idcountry1", placeholder = "Enter country" })
                @Html.ValidationMessageFor(model => model.country1, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.City1, htmlAttributes: new
                {
                  @class = "control-label col-md-2"
                })
                @Html.TextBoxFor(m => m.City1, new { @class = "form-control", id = "idCity1", placeholder = "Enter City" })
                @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.District1, htmlAttributes: new
                {
                  @class = "control-label col-md-2"
                })
                @Html.TextBoxFor(m => m.District1, new { @class = "form-control", id = "idDistrict1", placeholder = "Enter District" })
                @Html.ValidationMessageFor(model => model.District1, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Distance, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextBoxFor(model => model.Distance, new { @class = "form-control", id = "txtResult", placeholder = "Enter Distance" })
                    @Html.ValidationMessageFor(model => model.Distance, "", new { @class = "text-danger" })
                </div>
            </div>

            <div>
                <input type="button" class="btn btn-primary" onclick="submitStudent()" value="Submit" />
            </div>

        </div>




    </form>
</div>

<div id="result">
    <ul class="list-group">
        <li id="mile"
            class="
                  list-group-item
                  d-flex
                  justify-content-between
                  align-items-center
                ">
            Distance In Mile :
        </li>

        <li id="kilo"
            class="
                  list-group-item
                  d-flex
                  justify-content-between
                  align-items-center
                ">
            Distance is Kilo:
        </li>
        @*<li id="text"
                class="
                  list-group-item
                  d-flex
                  justify-content-between
                  align-items-center
                ">
                IN TEXT:
            </li>
            <li id="minute"
                class="
                  list-group-item
                  d-flex
                  justify-content-between
                  align-items-center
                ">
                IN MINUTES:
            </li>
            <li id="from"
                class="
                  list-group-item
                  d-flex
                  justify-content-between
                  align-items-center
                ">
                FROM:
            </li>
            <li id="to"
                class="
                  list-group-item
                  d-flex
                  justify-content-between
                  align-items-center
                ">
                TO:
            </li>*@
    </ul>
</div>





<br />
<br />

<div id="dvMap"></div>
<br />

@*<script src="~/js/SearchLocation.js?v=1"></script>*@
@*<script src="~/lib/jquery/jquery-3.6.0.js"></script>
    <script src="~/js/site.js"></script>*@


<script type="text/javascript">
    var markers = [];


    var a;
    var L1;
    var Long1;
    var L2;
    var Long2;

    function getlocation() {
        //debugger;


        var places = new google.maps.places.Autocomplete(document.getElementById('txtLocation'));
        google.maps.event.addListener(places, 'place_changed', function () {

            var place = places.getPlace();
            //var address = place.formatted_address
            latitude = place.geometry.location.lat();
            longitude = place.geometry.location.lng();


            var country;
            var city;
            var district;
            var Postal;
            var State;
            //debugger;
            for (var i = 0; i < place.address_components.length; i++) {
                var find = false;
                for (var j = 0; j < place.address_components[i].types.length; j++) {
                    if (place.address_components[i].types[j] == "postal_code") {
                        Postal = place.address_components[i].long_name;
                    }

                    else if (place.address_components[i].types[j] == "locality") {
                        city = place.address_components[i].long_name;
                    }

                    else if (place.address_components[i].types[j] == "administrative_area_level_2") {

                        district = place.address_components[i].long_name;
                    }

                    else if (place.address_components[i].types[j] == "administrative_area_level_1") {
                        State = place.address_components[i].long_name;
                        //alert(State);
                        if (State !== null) {

                            $("#drpList option:contains(" + State.toUpperCase() + ")").attr('selected', 'selected');
                            //$("#drpEmpList").val(State).attr("selected", "selected");
                            // $("#drpList").val(State);
                            //$('select[name^="salesrep"] option[value="Bruce Jones"]').attr("selected", "selected");
                        }
                    }
                    else if (place.address_components[i].types[j] == "country") {
                        country = place.address_components[i].long_name;
                    }
                }
            }


            $("#idPostal").val(Postal);
            $("#idCity").val(city);
            $("#idDistrict").val(district);
            $("#drpEmpList").text(State);
            $("#idcountry").val(country);
            $("#Latitude").val(latitude);
            $("#Longitude").val(longitude);

            var marker =
            {
                title: place,
                lat: latitude,
                lng: longitude,
                description: address
            }
            markers.push(marker);
            renderMap();


        });
    }


    function getlocationTwo() {
        //debugger;
        var places = new google.maps.places.Autocomplete(document.getElementById('txtLocationTwo'));
        google.maps.event.addListener(places, 'place_changed', function () {
            var place1 = places.getPlace();
            //var address = place1.formatted_address;
            latitude = place1.geometry.location.lat();
            longitude = place1.geometry.location.lng();

            var country;
            var city;
            var district;
            var Postal;
            var State;

            for (var i = 0; i < place1.address_components.length; i++) {
                var find = false;
                for (var j = 0; j < place1.address_components[i].types.length; j++) {
                    if (place1.address_components[i].types[j] == "postal_code") {
                        Postal = place1.address_components[i].long_name;
                    }

                    else if (place1.address_components[i].types[j] == "locality") {
                        city = place1.address_components[i].long_name;
                    }

                    else if (place1.address_components[i].types[j] == "administrative_area_level_2") {

                        district = place1.address_components[i].long_name;
                    }

                    else if (place1.address_components[i].types[j] == "administrative_area_level_1") {
                        State = place1.address_components[i].long_name;
                        //alert(State);
                        if (State !== null) {
                            $("#drpList1 option:contains(" + State.toUpperCase() + ")").attr('selected', 'selected');
                            //$("#drpEmpList").val(State).attr("selected", "selected");
                            // $("#drpList").val(State);
                            //$('select[name^="salesrep"] option[value="Bruce Jones"]').attr("selected", "selected");
                        }
                    }
                    else if (place1.address_components[i].types[j] == "country") {
                        country = place1.address_components[i].long_name;
                    }
                }
            }
            $("#idPostal1").val(Postal);
            $("#idCity1").val(city);
            $("#idDistrict1").val(district);
            $("#drpEmpList1").text(State);
            $("#idcountry1").val(country);
            $("#Latitude1").val(latitude);
            $("#Longitude1").val(longitude);
            var result = calculateDistance();
            //console.log(result);
            $("#txtResult").val(result);
            var marker =
            {
                title: place1,
                lat: latitude,
                lng: longitude,
                description: address
            }
            markers.push(marker);
            renderMap();

        });
    }

    function renderMap() {
        //debugger;
        if (markers.length > 0) {
            var mapOptions = {
                center: new google.maps.LatLng(markers[0].lat, markers[0].lng),
                zoom: 10,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };
            debugger;
            var map = new google.maps.Map(document.getElementById("dvMap"), mapOptions);
            var infoWindow = new google.maps.InfoWindow();
            var lat_lng = new Array();
            var latlngbounds = new google.maps.LatLngBounds();
            for (i = 0; i < markers.length; i++) {
                var data = markers[i]
                var myLatlng = new google.maps.LatLng(data.lat, data.lng);
                lat_lng.push(myLatlng);
                var marker = new google.maps.Marker({
                    position: myLatlng,
                    map: map,
                    title: data.title
                });

                latlngbounds.extend(marker.position);
                (function (marker, data) {
                    google.maps.event.addListener(marker, "click", function (e) {
                        infoWindow.setContent(data.description);
                        infoWindow.open(map, marker);
                    });
                })(marker, data);
            }
            map.setCenter(latlngbounds.getCenter());
            map.fitBounds(latlngbounds);

            //***********ROUTING****************//

            //Initialize the Path Array
            var path = new google.maps.MVCArray();

            //Initialize the Direction Service
            var service = new google.maps.DirectionsService();

            //Set the Path Stroke Color
            //var poly = new google.maps.Polyline({ map: map, strokeColor: '#4986E7' });

            //Loop and Draw Path Route between the Points on MAP
            //for (var i = 0; i < lat_lng.length; i++) {
            //    if ((i + 1) < lat_lng.length) {
            //        var src = lat_lng[i];
            //        var des = lat_lng[i + 1];
            //        path.push(src);
            //        poly.setPath(path);
            //        service.route({
            //            origin: src,
            //            destination: des,
            //            travelMode: google.maps.DirectionsTravelMode.DRIVING
            //        }, function (result, status) {
            //            if (status == google.maps.DirectionsStatus.OK) {
            //                for (var i = 0, len = result.routes[0].overview_path.length; i < len; i++) {
            //                    path.push(result.routes[0].overview_path[i]);
            //                }
            //            }
            //        });
            //    }
            //}
        }
    }




    function calculateDistance() {
        //debugger;
        var origin = $("#txtLocation").val();
        var destination = $("#txtLocationTwo").val();
        var service = new google.maps.DistanceMatrixService();
        service.getDistanceMatrix(
            {
                origins: [origin],
                destinations: [destination],
                travelMode: google.maps.TravelMode.DRIVING,
                unitSystem: google.maps.UnitSystem.IMPERIAL, // miles and feet.
                // unitSystem: google.maps.UnitSystem.metric, // kilometers and meters.
                avoidHighways: false,
                avoidTolls: false,
            },
            callback
        );
    }

    // get distance results
    function callback(response, status) {
        if (status != google.maps.DistanceMatrixStatus.OK) {
            $("#result").html(err);
        } else {
            var origin = response.originAddresses[0];
            console.log(origin);
            var destination = response.destinationAddresses[0];
            console.log(destination);
            if (response.rows[0].elements[0].status === "ZERO_RESULTS") {
                $("#result").html(
                    "Better get on a plane. There are no roads between " +
                    origin +
                    " and " +
                    destination
                );
            } else {
                var distance = response.rows[0].elements[0].distance;
                console.log(distance);
                var duration = response.rows[0].elements[0].duration;
                console.log(duration);
                console.log(response.rows[0].elements[0].distance);
                var distance_in_kilo = distance.value / 1000; // the kilom
                var distance_in_mile = distance.value / 1609.34; // the mile
                console.log(distance_in_kilo);
                console.log(distance_in_mile);
                var duration_text = duration.text;
                var duration_value = duration.value;
                $("#txtResult").html(
                    `Distance in Miles: ${distance_in_mile.toFixed(2)}`
                );
                $("#kilo").html(
                    `Distance in Kilometre: ${distance_in_kilo.toFixed(2)}`
                );
                $("#text").html(`Distance in Text: ${duration_text}`);
                $("#minute").html(`Distance in Minutes: ${duration_value}`);
                $("#from").html(`Distance From: ${origin}`);
                $("#to").text(`Distance to: ${destination}`);
            }
            return distance_in_mile;
        }

    }

    $(document).ready(function () {
        //debugger;
        LoadMarkers();

    });


    function LoadMarkers() {
        $.ajax({
            type: 'GET',
            url: '/Home/GetData',
            //async: false,
            //contentType: 'application/x-www-form-urlencoded; charset=UTF-8', // when we use .serialize() this generates the data in query string format. this needs the default contentType (default content type is: contentType: 'application/x-www-form-urlencoded; charset=UTF-8') so it is optional, you can remove it
            data: "",
            success: function (result) {

                //    //toastr.success('Successfully received Data ');
                //    toastr.success('Successfully received Data')
                //alert('Successfully received Data ');
                console.log('Get Markers success');
                console.log(result);
                $.each(result, function (index, res) {
                    //debugger;
                    console.log(res);
                    var marker =
                    {
                        title: res.address1,
                        lat: res.latitude,
                        lng: res.longitude,
                        description: ""
                    }
                    markers.push(marker);
                    var marker1 =
                    {
                        title: res.address2,
                        lat: res.latitude1,
                        lng: res.longitude1,
                        description: ""
                    }
                    markers.push(marker1);
                });
                renderMap();
            },
            error: function () {
                //alert('Failed to receive the Data');
                console.log('Get Markers failed');
            }

        })
    }



    function submitStudent() {
        //debugger;
        //var result = distance(L1, Long1, L2, Long2);
        //console.log(result);
        //$("#txtResult").val(result);

        var data = $("#studenteForm").serialize();
        console.log(data);
        alert(data);
        $.ajax({
            type: 'POST',
            url: '/Home/TestAddress',
            contentType: 'application/x-www-form-urlencoded; charset=UTF-8', // when we use .serialize() this generates the data in query string format. this needs the default contentType (default content type is: contentType: 'application/x-www-form-urlencoded; charset=UTF-8') so it is optional, you can remove it
            data: data,
            success: function (result) {

                //    //toastr.success('Successfully received Data ');
                //    toastr.success('Successfully received Data')
                alert('Successfully received Data ');
                //    console.log(result);
            },
            success: function (result) {
                alert('Successfully received Data ');
                console.log(result);
            },
            error: function () {
                alert('Failed to receive the Data');
                console.log('Failed ');
            }

        })
    }





</script>
